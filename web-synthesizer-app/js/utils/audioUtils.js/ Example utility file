// This file contains helper functions for audio processing, such as loading audio files and managing audio contexts.

export function loadAudioFile(url) {
    return new Promise((resolve, reject) => {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.arrayBuffer();
            })
            .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
            .then(audioBuffer => resolve({ audioContext, audioBuffer }))
            .catch(error => reject(error));
    });
}

export function createGainNode(audioContext, gainValue = 1) {
    const gainNode = audioContext.createGain();
    gainNode.gain.value = gainValue;
    return gainNode;
}

export function connectNodes(sourceNode, destinationNode) {
    sourceNode.connect(destinationNode);
}

export function disconnectNodes(sourceNode, destinationNode) {
    sourceNode.disconnect(destinationNode);
}

export function setVolume(gainNode, value) {
    gainNode.gain.setValueAtTime(value, gainNode.context.currentTime);
}